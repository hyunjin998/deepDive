// p.198

var x = 1;

function foo(){
	var x = 10;
	bar();
}

function bar(){
	console.log(x);
}

foo();
bar();

/*
실행 결과는 bar 함수의 상위 스코프가 무엇인지에 따라 결정됨
1. 함수를 어디서 호출했는지
2. 함수를 어디서 정의했는지

- 동적 스코프(dynamic scope) : 첫 번째 방식으로 함수의 상위 스코프를 결정한다면 bar 함수의 상위 스코프는 foo 함수의 지역 스코프와 전역 스코프임.
함수를 정의하는 시점에서 함수가 어디서 호출될지 알 수 없기 때문에 함수가 호출되는 시점에 동적으로 상위 스코프를 결정해야 함

- 정적 스코프(static scope, 렉시컬 스코프, lexical scope) : 두 번째 방식이라면 bar 함수의 상위 스코프는 전역 스코프임
상위 스코프가 동적으로 변하지 않고 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정됨

=> 자바스크립트(를 비롯한 대부분의 프로그래밍 언어)는 렉시컬 스코프를 따르므로 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는지에 따라 상위 스코프를 결정함.
함수가 호출된 위치는 상위 스코프 결정에 어떠한 영향도 주지 않으며, 즉, 함수의 상위 스코프는 언제나 자신이 정의된 스코프임
이처럼 함수의 상위 스코프는 함수 정의가 실행될 때 정적으로 결정됨
함수 정의(함수 선언문 또는 함수 표현식)가 실행돼 생성된 함수 객체는 결정된 상위 스코프를 기억하고, 함수가 호출될 때마다 함수의 상위 스코프를 참조할 필요가 있음

*/